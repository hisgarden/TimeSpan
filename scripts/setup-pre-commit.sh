#!/bin/bash

# Setup script for pre-commit hooks
# This script installs the pre-commit hook to run tests before commits

set -e

echo "🔧 Setting up pre-commit hooks for TimeSpan..."

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "❌ Not in a git repository. Please run this from the TimeSpan repository root."
    exit 1
fi

# Get the repository root
REPO_ROOT=$(git rev-parse --show-toplevel)
HOOKS_DIR="$REPO_ROOT/.git/hooks"
PRE_COMMIT_HOOK="$HOOKS_DIR/pre-commit"
SCRIPT_PATH="$REPO_ROOT/scripts/pre-commit.sh"

echo "📁 Repository root: $REPO_ROOT"
echo "📁 Hooks directory: $HOOKS_DIR"

# Check if the pre-commit script exists
if [ ! -f "$SCRIPT_PATH" ]; then
    echo "❌ Pre-commit script not found at $SCRIPT_PATH"
    exit 1
fi

# Make sure the script is executable
chmod +x "$SCRIPT_PATH"

# Create the pre-commit hook
echo "📝 Creating pre-commit hook..."
cat > "$PRE_COMMIT_HOOK" << EOF
#!/bin/bash
# Pre-commit hook for TimeSpan
# Generated by setup-pre-commit.sh

exec "$SCRIPT_PATH"
EOF

# Make the hook executable
chmod +x "$PRE_COMMIT_HOOK"

echo "✅ Pre-commit hook installed successfully!"
echo ""
echo "🎯 The hook will now run the following checks before each commit:"
echo "   • Code formatting (cargo fmt)"
echo "   • Linting (cargo clippy)"
echo "   • Tests (cargo test)"
echo "   • Build (cargo build)"
echo ""
echo "💡 To bypass the hook for a specific commit, use:"
echo "   git commit --no-verify -m \"your message\""
echo ""
echo "🔧 To remove the hook, run:"
echo "   rm $PRE_COMMIT_HOOK"
