name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

env:
  CARGO_TERM_COLOR: always

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run cargo audit
      run: cargo audit
      
    - name: Run cargo audit (JSON output for analysis)
      run: cargo audit --json > audit-results.json
      continue-on-error: true
      
    - name: Upload audit results
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-results
        path: audit-results.json

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies  
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-deny
      run: cargo install cargo-deny
    
    - name: Create deny.toml config
      run: |
        cat > deny.toml << 'EOF'
        [advisories]
        version = 2
        ignore = []
        
        [licenses]
        version = 2  
        allow = [
            "MIT",
            "Apache-2.0", 
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016"
        ]
        
        [bans]
        version = 2
        multiple-versions = "warn"
        wildcards = "allow"
        
        [sources]
        version = 2
        unknown-registry = "deny"
        unknown-git = "deny"
        EOF
    
    - name: Run cargo deny
      run: cargo deny check

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust  
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run security tests
      run: cargo test security_tests --verbose
      
    - name: Run all tests with security focus
      run: cargo test --verbose
    
    - name: Check for unsafe code usage
      run: |
        echo "Checking for unsafe blocks..."
        if grep -r "unsafe" src/ --exclude-dir=target; then
          echo "::warning::Found unsafe blocks in source code"
        else
          echo "âœ… No unsafe blocks found"
        fi

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry  
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Generate SBOM
      run: |
        cargo install cargo-auditable
        cargo auditable build --release
        
    - name: Extract SBOM  
      run: |
        cargo install auditable-extract
        auditable-extract target/release/timespan > sbom.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.json

  static-analysis:
    name: Static Analysis  
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git  
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run Clippy with security lints
      run: |
        cargo clippy -- \
          -W clippy::integer_arithmetic \
          -W clippy::unwrap_used \
          -W clippy::expect_used \
          -W clippy::panic \
          -W clippy::unreachable \
          -W clippy::unimplemented \
          -W clippy::todo \
          -W clippy::mem_forget \
          -W clippy::mem_replace_with_uninit \
          -W clippy::lossy_float_literal \
          -W clippy::string_slice

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-check, security-tests, supply-chain-security, static-analysis]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate security summary
      run: |
        echo "# Security Check Summary" >> security-summary.md
        echo "" >> security-summary.md
        echo "## Job Results:" >> security-summary.md
        echo "- Security Audit: ${{ needs.security-audit.result }}" >> security-summary.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-summary.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> security-summary.md
        echo "- Supply Chain Security: ${{ needs.supply-chain-security.result }}" >> security-summary.md
        echo "- Static Analysis: ${{ needs.static-analysis.result }}" >> security-summary.md
        echo "" >> security-summary.md
        echo "## Timestamp: $(date -u)" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md